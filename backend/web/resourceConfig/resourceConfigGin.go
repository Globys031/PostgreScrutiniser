// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/gin-gonic/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (DELETE /resource)
	DeleteResourceConfigs(c *gin.Context)

	// (GET /resource)
	GetResourceConfigs(c *gin.Context)

	// (PATCH /resource)
	PatchResourceConfigs(c *gin.Context)

	// (GET /resource/{config})
	GetResourceConfigById(c *gin.Context, config GetResourceConfigByIdParamsConfig)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// DeleteResourceConfigs operation middleware
func (siw *ServerInterfaceWrapper) DeleteResourceConfigs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteResourceConfigs(c)
}

// GetResourceConfigs operation middleware
func (siw *ServerInterfaceWrapper) GetResourceConfigs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetResourceConfigs(c)
}

// PatchResourceConfigs operation middleware
func (siw *ServerInterfaceWrapper) PatchResourceConfigs(c *gin.Context) {

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PatchResourceConfigs(c)
}

// GetResourceConfigById operation middleware
func (siw *ServerInterfaceWrapper) GetResourceConfigById(c *gin.Context) {

	var err error

	// ------------- Path parameter "config" -------------
	var config GetResourceConfigByIdParamsConfig

	err = runtime.BindStyledParameter("simple", false, "config", c.Param("config"), &config)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter config: %s", err), http.StatusBadRequest)
		return
	}

	c.Set(BearerAuthScopes, []string{""})

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetResourceConfigById(c, config)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {

	errorHandler := options.ErrorHandler

	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.DELETE(options.BaseURL+"/resource", wrapper.DeleteResourceConfigs)

	router.GET(options.BaseURL+"/resource", wrapper.GetResourceConfigs)

	router.PATCH(options.BaseURL+"/resource", wrapper.PatchResourceConfigs)

	router.GET(options.BaseURL+"/resource/:config", wrapper.GetResourceConfigById)

	return router
}
