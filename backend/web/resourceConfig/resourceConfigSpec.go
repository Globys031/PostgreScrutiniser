// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXT2/cthP9KgR/v0MKCN512gCBbk1bFD60CBy0PaSGQFMjiTH/KJyhna2x370YStpd",
	"S6rdIGjaQy6GLFIzj2/evOHeSx1cHzx4QlneS9QdOJUff4gxxJ8AUbXA//cx9BDJQF4FXq3ccZl2PchS",
	"IkXjW7nfFzLC+2Qi1LJ8O9t+VUzbw/U70CTzbgwpavgu+Ma0OcUH5XoLsnx7L2sgZSzK0idrC9kGqnJI",
	"WVJMUEivXM4ORMa35/KQHatLQFKRZNkoi1BITG0LSFBXt8ommEImb2h6Hhc49L44SS4vQQfnwNdQi7xJ",
	"NCGKayCCKHqITYhOeQ1yjuj5KaI4IRqwLwC92G4nPNKhPOA53273V8WsEAdw/Ig6mp5M8LKU3w8LwnhG",
	"ZXwr7rqdUCPuO4XikFgW8/IVEnxyDGglMvagTWMAxV2nSPCnIjRDYBTjiYUOydaiU7ewFv6kgo+FB+og",
	"Ct2BvhFtIKG8GL46hLwOwYLyHHOgfB7uZ+UyPOpgwrYGaFmdeaDfRjRKjFuEQTGJXKiGMlLlWz49ZxvK",
	"toZ0UfJ5rl9zkYjpvTPWims4VmtMFZP3mWcmZ+1Eg4LmkX/xhpgOBwpTBAeexDMshMNC3LwqxEv+A6TP",
	"vlqL+Sjcp0jeP9n2rxXp7k32oLkDLDt8QeL5dq1BPkkVn6FQM6fMcJeJl5bJH3JvLzFdjpyKgdQUFS+g",
	"+Pb1Bac3xJTK1wGpjfBGx0TGGwRuqluIOAQ5P9uebZmC0INXvZGl/Dq/KmSvqMvUbqbqDRgs0ApDERAI",
	"hbJW6OCJ9WY8mjrT3w8g8L09U4nCmQ6+Ec/uTA8oDOH0BWuRa5oPclFnd+Nslw/Ug9lksQ8eh9I/375Y",
	"sZekNSB37rCTz/hiu+WNYzZ+VH1vjc75Nu+QP5yGIz/9P0IjS/m/zXF6bsbRuXkwN3OVHuZ/A/EWosgM",
	"DF6WtzQqWfpsIJKHDz1oFumIgfe0QGtqohT9UMCp3lyXo7JGf46AyRL+7hfF+hHoyUo9/6izGwKHT5Ew",
	"u1Ic7UfFqHZrtHzRxl9qo2drXqojwwAUwYMIUbgQDwbInrOQQnb4NTG8T4D0KtS7f1oHpzNmVRJHNx4u",
	"gHOlnj/iuLO+iKCYxlFWTbJ2xzm/+YySuvC3yppajAyLa6b4P6KqfXEcIZv7gbs9J3rciMR4Q9QnfjTO",
	"1id859Xuos4DLCoHBBHHHxenafx4M5h5naAgGBYPXVnmGXi85Q9b5Fw7xQl3fJ/m+c5j7lbplFx1F+JN",
	"5cDJQtY7r5zRFXYqQs0vQ9xVWZuF7BR2/KpyyZLhfuNR3aUWql61UKH5A05fcEM5Zbio/GPkNI9TH6o+",
	"Qp+zUFQelZ4aldeQlL6paujz6UY016lpmKvDi4fwCFx/suckmw2t0cpWNehQG98ekVwtr0FXnzgSPmYS",
	"/D3n/zfa9CDNL6NnMgm+hmdwQ7emaGUpO6K+3Gxs0Mp2Aal8uX253fA9dX+1/zMAAP//T08uLdYQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
