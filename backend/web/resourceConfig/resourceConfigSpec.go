// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW2/bNhT+KwfcHlJAs+Wk3Qq/LdswBLuga3d56ALhmDqS2IikyotdL/B/Hw4lXyJ7",
	"SYti2R76YtAieW7fdy68FdLqzhoywYv5rfCyIY1p+Z1z1v1E3mNN/L9ztiMXFKVd4t1C77fDuiMxFz44",
	"ZWqx2WTC0duoHJVi/np0/DrbHreLNySDSKe9jU7SN9ZUqk4q3qHuWhLz17eipICq9WIufm2UBx/rmnxQ",
	"1sAKPWgsCRZrKNVSlcrUIKNzZALgElWLi5ZAk7ZufXZ+fvHlbHY+yfObyyd85SmgKXnR2BVoNGvAGOwS",
	"ZYy60PiuWFl3Q86fXTwBdASegsgEmaiLJSaDRCZqG4rkoZhX2HrKhEHN7h3IYjmFJi0yMVhPJYuIfG52",
	"Mcu/OheZiEYFMRc3lyIT280vZmKTHYbgB3KGWujQoaZADowrmlhThzV54PBQgGAhn8AlSYyewFYQGgwZ",
	"vLA+1I5e/fIjSDTGBmCYyAdgCZBEjBy8tVWVWZMFt97c5ywLKLYCjn20VbV38MA9/r65zkb82nnLSy+d",
	"6hhtMRff9hugTGWdZrBXzRoQkrjEhp1qkY1ZecexsWTfkVSVIg+rBgPwVY5bEpxiGhK1bGxLaHBJp8Qf",
	"BOc+8RQaciAbkjdQ2wBooL+1E7mwtiU0LLMP71jcz6gHWGlr2ymDhiT0hSMf0IVjQX8M1iAMR5hB29wF",
	"rEKyFE3N3rO2HrhTlh6BPtb1ewKJmQgr1bawoD1agyoXjUlx5uCc8qhn0Fjyb0YFDocm9NGR5uw/8xlo",
	"n8HNZQbP+YeCnDw5JfNecx8K8ubBavYCg2xepdI6LmwfWijyPM9TOXj/pDtOro9i1COAPGoeydxjxcdd",
	"hC9yXTi26eWAB/SARIe84eHrF1esXgWGQ2yLo3QxKKM8cUIuyfleyGySTzj4wnZksFNiLi7Sp0x0GJoU",
	"2ukW+d6GlsKJCDnyFDxg24K0JjBXlfGqTOHveiP823bCrJhIayo4W6mOa3vw2xvMY8Y0OXJVpsrI2l7e",
	"YR6zwpHvrPE99Of5sxOlKUpJnrO+P8k+PstzPjho4yV2Xatk0jd94/nidl7g1eeOKjEXn033A8V0mCam",
	"d0aJhNJd/a/ILclBikBfB9ORCmMbHs2IaOhdR5JJOtjAZ2oKp9gUojM9gFu8GZc9s4ba7sjHNvg/zRFY",
	"31N4EKnzD/JdBdL+oSCMpqx96ULncH0qLJ+48Y/c6LisH7MjmUEerCGwDrR1dDCw+iMqpO5wigxpLru0",
	"5frf5sFhfzpJiX01Di7S5oips3sq7igvHCGHcaBVFdt2zTqfPiKlrswSW1XuJt8Fh/h/wqpNtm8h09s+",
	"dhtWdH8hgmG6lAf1aOitD9Sdy/VVmRrY8Jjww3vrUI0ZJoNRreM3Rt2/h7YTjfANOiqLRawqlsX9WMxT",
	"exS7h0J/W4xplR2Elcd0bv2n56JybVArWQzK+rddkWibiQZ9w58KHdugOBW5i+/mpMKrv+jwAxupUTHe",
	"aCQd6uH3X+eoS1qCQ+NRbnOY93xAeVOU1CXvjlw/aV4g3R2cOdDW2lpJbIuSpOVX7N6S6+MJ6foju8WH",
	"NIn3awr/RQbvWPupK23rB0/oybg+kaNr+ZUQQjefTlsrsW2sD/Pn+fN8yiPs5nrzdwAAAP//to7O+gQS",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
