// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYWW/bRhD+K4ttHxyAtSg7aQO9xb3gXkiTtHlIDWK0HJIb7cHsIVk19N+LWVISTQl2",
	"gqBGAuTFoLjLb65vLt9wYXVrDZrg+eyGe9GghvT4o3PW/Y7eQ430u3W2RRckplOk00Lvj8O6RT7jPjhp",
	"ar7ZZNzhuygdlnz2ZnT9Kttet/O3KAJPt72NTuD31lSyTiKuQbcK+ezNDS8xgFSez/irRnrmY12jD9Ia",
	"tgLPNJTI5mtWyqUspamZiM6hCQyWIBXMFTKN2rr1ydnZ+bfT6dlpni8uHtEnjxmYkh4au2IazJpBDHYJ",
	"IkZdaLguVtYt0PmT80cMHDKPgWccTdTFEpJCPOO1DUWykM8qUB4zbkCTeQMswik0ap7xXnssCSLSven5",
	"NP/ujGc8Ghn4jC8ueMa3h99M+SYbuuBXdAYVa8GBxoCOGVc0scYWavSM3IOBBcvyU3aBAqJHZisWGggZ",
	"e259qB2+/PM3JsAYGxiFCX1ghMASxMjAG1tVmTVZcOvNXcYSQLEFOLTRVtXewIF59H5zlY34tbOWHr1w",
	"sqVo8xn/oTtg0lTWaQr2qlkzYAkusWEnmmdjVt4ybIzsWxSykujZqoHA6FPyWwJOPg2JWjaqkjWwxGPw",
	"A+fcBY+hQcdEg2LBahsYGNZ9tYOcW6sQDGF27h3D/QG6DytudTumUJ+EvnDoA7hwCPS61wZYf4UYtM1d",
	"BlVImoKpyXqS1gXumKYHQR/L+jsFiZjIVlIpNsd9tHpRLhqT/EzOOWZRx6Ax8l9GBnKHRvDRoabsP/EZ",
	"0z5ji4uMPaU/GMTpo2OYd6p7n5M391az5xBE8zKV1nFh+9BCked5nsrB+yfdYXJ9FKMeIMij5pHUPRR8",
	"2EVIOxTRybBO3u6snSM4dM9iaPa/frJOAxWiX16/Iuh0m8icTvcaNSG0fEPAVG8ObX3Rx5l1gY4O6MCz",
	"Z88vCUQGCjPfFl3hYpBG+iRhic53INPT/JSCym2LBlrJZ/w8vcp4C6FJRky2jOp0UBiOeN6hx+AZKMWE",
	"NYFyQBovyxTWtlPCv1OnxLZTYU3FTlaypZ4R/PYLyg/iSjLkskwVl6S9uMVoYptD31rjOyef5U+OlLwo",
	"BHqqJt1NsvFxPqWLvTR6hLZVUiR5k7eePtzOIfT0tcOKz/hXk/2gMumnlMmtESVF6bb8V3aBhmnpPZHN",
	"OqZBUdfAkjR5kucPpslLdEt0LMWiq/TpSgVRhQdTIhq8blFQGvY6UOmC2lOS7fh1RW0MwzGuh+hMR6/t",
	"bWLNnvd9R3Poowr+H3NApZ8x3Mujsw/yhwyo/X2OGc2W+4INzsH6mKu+MPczZW5LrfaQu0k19MwaTN60",
	"DgdLhD8gaurYx6iaZuULW67/b5YOZ4ajhN13yOAibg7yaHpHtxplrUMg1/akr6JS647wD0ezS7MEJcvd",
	"NjInF39SSfepcn6T7YeDyU0X2Q0Jv7uIs34fEYNa3k9j99Tsi/VlmUaTfv30/YY+FGP6WXLUJ2grrbsN",
	"ejsDc9+Aw7KYx6oiLJq0+CwNPny3WnZf8zHps4GrabEjzxyfpMu1AS1F0Qvr/htQpKTKeAO+oVeFjipI",
	"KhQ0n+0m68LLf3H4gpTUIIkDYAQO5Wi4LlqHbZISHBgPYlth6MwHEIuixDZZd2D6UfUC6nZwZyBN2VoK",
	"UEWJwpbS1HtNrg5n6quP7LQf0mDft6E+fH3ZsfZLR/8sOvpwp0t1ZrjNvbkiVvtkT1eFolP91jabTJQV",
	"oBrrw+xp/jSf0Ga1udr8FwAA///b3kUz8xQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
