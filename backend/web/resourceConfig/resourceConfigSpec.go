// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXW2/bthf/Kgf8/x9SQLPlpN0Kvy3bMAS7oGt3eegC4Zg6ktiIpMqLXS/wdx8OJV8i",
	"G0mDYtke+mLQInkuv/M7F94KaXVnDZngxfxWeNmQxrT8zjnrfiLvsSb+3znbkQuK0i7xbqH322HdkZgL",
	"H5wytdhsMuHofVSOSjF/Ozp+nW2P28U7kkGk095GJ+kbaypVJxUfUHctifnbW1FSQNV6MRe/NsqDj3VN",
	"PihrYIUeNJYEizWUaqlKZWqQ0TkyAXCJqsVFS6BJW7c+Oz+/+HI2O5/k+c3lM77yHNCUvGjsCjSaNWAM",
	"dokyRl1o/FCsrLsh588ungE6Ak9BZIJM1MUSk0EiE7UNRfJQzCtsPWXCoGb3DmSxnEKTFpkYrKeSRUQ+",
	"N7uY5V+di0xEo4KYi5tLkYnt5hczsckOIfiBnKEWOnSoKZAD44om1tRhTR4YHgoQLOQTuCSJ0RPYCkKD",
	"IYNX1ofa0ZtffgSJxtgAHCbyAVgCJBEjB29tVWXWZMGtN/c5ywKKrYBjH21V7R08cI+/b66zEb923vLS",
	"S6c6jraYi2/7DVCmsk5zsFfNGhCSuMSGnWqRjVl5x7GxZN+RVJUiD6sGA/BVxi0JTpiGRC0b2xIaXNIp",
	"8Qfg3CeeQkMOZEPyBmobAA30t3YiF9a2hIZl9vCOxf2MeggrbW07ZdCQhL5w5AO6cCzoj8EahOEIM2ib",
	"u4BVSJaiqdl71tYH7pSlR0Ef6/o9BYmZCCvVtrCgfbQGVS4ak3BmcE551DNoLPk3owLDoQl9dKQ5+898",
	"BtpncHOZwUv+oSAnz07JvNfch0DePFjNXmGQzZtUWseF7bGFIs/zPJWDj0+64+T6JEY9QZBHzSOZe6z4",
	"uIvwRa4Lxza9HuIBfUCiQ97w8PWrK1avAodDbIujdDEoozxxQi7J+V7IbJJPGHxhOzLYKTEXF+lTJjoM",
	"TYJ2uo18b0NL4QRCjjwFD9i2IK0JzFVlvCoT/F1vhH/fTpgVE2lNBWcr1XFtD357g3nMMU2OXJWpMrK2",
	"13eYx6xw5DtrfB/68/zFidIUpSTPWd+fZB9f5DkfHLTxEruuVTLpm77zfHE7L/Dq/44qMRf/m+4Hiukw",
	"TUzvjBIpSnf1vyG3JAcJgb4OpiMVxjY8mRHR0IeOJJN0sIETG2vPFNxF9ZqLPIVTDAvRmT6o29Mcqz3b",
	"hnrvyMc2+D/NUQC/p/Bg9M4fhYcKpP1DwIwmr305Q+dwfQqqz3x5FF86Lv/HjEmmkQdrCKwDbR0dDLb+",
	"iB6pi5wiSJrfLm25/qe5cdjHTtJkX7WDi7Q5Yu/snso8yhVHyNAOVKti265Z5/MnpNmVWWKryt2EvGCI",
	"/8NM22T79jO97fHcsPL7CxYMk6k8qFtDX36gPl2ur8rU/IaHiB/eaodqzDBVjGoiv0/q/i21nYaEb9BR",
	"WSxiVbEs7uVinlqr2D0y+ttiTLXsAGoe8RmZ0zNVuTaolSwGZf27sEhUzkSDvuFPhY5tUJyePAHsZqzC",
	"q7/o8AMbqVExB9BIOtTDb8fOUZe0BIfGo9zmNe/5gPKmKKlL3h25ftK8QLo7OHOgrbW1ktgWJUnLL+C9",
	"JdfH09X1J3aVxzSTj2se/0ZW71j7uXvdV1N44k8G98kdXcuvjhC6+XTaWoltY32Yv8xf5lMeiTfXm78D",
	"AAD//zYJU+dUEgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
