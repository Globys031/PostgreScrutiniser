// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWS2/cNhD+KwTbQwoI2XXSAoFuTVsUPrQInDY9pIYwpmYlxnwo5HDtrbH/vRjqsYq0",
	"tREELdCLreVj5ptvvhnOg1Tedt6hoyjLBxlVixby508h+MAfXfAdBtKYl5Wvkf/vfLBAspTa0csXspB0",
	"6LD/iQ0GeSykxRihyaeHzUhBu0Yej4UM+DHpgLUs3/c2T+evJ2P+5gMqkvl49Cko/MG7nW7YJN6D7QzK",
	"8v2DrJFAmyhLl4wpZOOpwh4+hYSFtHBfvQMz7lvt5j8d2AwOibRrLuQELlZXGAkCyXIHJmIhY2oajIR1",
	"tQeTcLSQnKbxe9joHe8hDKHceG8QnDwWM7jyCpW3Fl2NtcgXxc4HcYNEGESHIbPsVGYH7tmpLC+2220f",
	"Q/65XQbwYh5AGAPo8azwf8e2evjSRjnBv+D1E/opq9fFQg9TLPwZVdAdae9kKX/sN4R2HIR2jbhrDwKG",
	"MO8gignMST2jQAqJLlkGecZy7FDpncYo7logwVeF3/WGoxhYEMonU4sW9njO/Ewij5lHajEI1aK6FY0n",
	"AU70tyaTp7yeMrS0+Avca5usAGP83ZTpZw6R884Z34PRNfDxb86hnZK9sqzdl1nupbM0+yvYTCm1OPJ5",
	"7vJaZUtDfwwMghiOCB3FWPoCdpTZBddwxthbL79z7K6ku/T1LsdOLIk7bYy4wZPCBlchOZe1wQk9F1Ff",
	"CUvLvztNTIdFiCmgRUfiWSyEjYW4fV2IV/wHST0/S/GjcJ8meSrCpYHfBt1PtIlnA12FGOq1EFxG/4jt",
	"+GSjfQOk2rf5UVj23HXXXGWIO9W6Y3yR5P4DFSwepwx37Xj9SPFFbnZrTFcDp6InNYVcj1F8/+aS3Wti",
	"SuUbH6kJ+FaFRNrpiNxl9hhib+Ti+fb5linwHTrotCzly7xUyA6ozdRuxuzxjwbpHBRKwUVuGGI8LNQc",
	"1tDtAsZkKP7pZPbY713WspQ/I119IpKYH5zYeRf7DL/YbvtRwRG6DAK6zmiVbWw+REYyzhr8pQltvvh1",
	"wJ0s5Veb01SyGUaSzWICOGkXQoBDT/+ikSelMHK/6bHJfGIHydBnwXsMVT8lnXGeHN53qFh1eDrTcT2t",
	"s5L9YxTeofBBWB8m1bJQVinIZXkuCR8TRnrt68O/zf+8MZxNxamEePI4rhRy8UiZLPQYEJjGIZ27ZMyB",
	"fX7bq+xTG5cuP3hioELcMBfHjGiKYPPQOzg+XSViGAbUrFiGrvFEUbw+XNa5NANYJAxxGFTnbtzQ8xaF",
	"KMgLhsXtRJa5uuU05PVH5JLgYpZO7vncuSCR34NKyVZ3PtxWFq0sZH1wYLWqYgsBa1704VDlBBayhdjy",
	"UmWTIc2i5CbUpgarDhqsov4L5wsxD6b82jgeU+d+eBrqAnbZCwVwEdSoZt6LBOq2qrHL0Q1obtJux1xN",
	"C5/CI7Td7MzMm/GNVmCqGpWvtWtOSK7XDf76C/vV57Sp/0Fb4lMRw34UaQpGlrIl6srNxngFpvWRylfb",
	"V9sNPzzH6+PfAQAA//98q5OaOA4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
