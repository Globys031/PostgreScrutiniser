// Package resourceConfig provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package resourceConfig

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RWTW/bRhP+K4t530MKEJGcoIDBW9MWhQ8tArdND6lBjJcjcuP9YHdnJauG/nuxuyTF",
	"SKqNIKdebHJ3+MwzH8+MnkA6MzhLlgPUTxBkTwbz44/eO58eBu8G8qwoH0vXUvq/cd4gQw3K8ts3UAHv",
	"Byqv1JGHQwWGQsAuW4+Xgb2yHRwOFXj6KypPLdQfC+bR/m4Gc/efSDJk8+Cil/S9sxvVJUh6RDNogvrj",
	"E7TEqHSA2katK+gcN1Tos49UgcHH5gPq6d4ou3y1aDI5Yla2u4KZXGhuKTB6hnqDOlAFIXYdBaa22aKO",
	"NCFEq3h6Hi+K4y36MZR75zShhUO1oAu3JJ0xZFtqRf5QbJwX98RMXgzkc5atzNnBx+QU6qv1el1iyK/r",
	"0wDeLAPwUwCFzxn/bxNWoQ8mwEz/Kp0f2c9VvatO+mGOJT0G6dXAylmo4YdyIZRNQSjbiV2/FziGucMg",
	"ZjLH7pkapAKy0SSSF5DDQFJtFAWx65FF+lS4TQEOYsyCkC7qVvS4pUvwixZ5Dp64Jy9kT/JBdI4FWlG+",
	"miGPdT1W6BTxZ3xUJhqBWrvdXOlXlijVPVV8i1q1mMy/ucR2LvYZsrJfh1xa5xT2FzQ5pdzTlM9LH593",
	"2SnQH2MGUYwmQgUxSV/ghnN20XapYslbab9L2T1r3VNfH3LsnFpip7QW93TssNGVj9bm3kgFvRRRUcIp",
	"8u9WcUqHIQzRkyHL4lWohAmVeHhXiev0h1i+vpjiZ+m+nORZhKcAv419P6dNvBrTVYlRr5VIMvpXboez",
	"QZuOkmDPvd2OA1iUCRx97qkgvnt/k4AVp1EM713gztOv0kdWVgVKStmSDwXk6vX69ToF5QayOCio4W0+",
	"qmBA7rPWV9OoTy8d8SUqHL0NqenFZCzkktaoWE8hag5/Wsgey91NCzX8RHz72UYJeWiGwdlQ5tqb9bqs",
	"O8tkMwkcBq1kxlh9ConJtC/Tk2Iy+cP/e9pADf9bHTfralyrq5Mtdsw/eo/7kv6TYRSlpJA0U7hBtthg",
	"1PxF9J5jVTb9BefR0uNAMumHJptDdazQ6qlk/fByqcQ4VeWiYqMIX6jMu/1Nm/vDoyEmH8aNv3Rjx3l1",
	"0g2CnUi0Uk9DnVsM5m1ZTGD5S2TckXPSknjS7xOM7LYoYzTNzvmHxpCBCtq9RaNkE3r01KZD5/dNLmgF",
	"PYY+HTUmalaDVlkJfeyoGbCjJqi/aXkQ8oZPsrVp3y/9pLUyeBqyF/ZoA8qsvfEuMMqHpqUhRzeyuY+b",
	"TcrVfPA5PSYzLGwW3rTrlETdtCRdq2x3ZHJ3Pj/uvlI0X6KV/4I20poiv52aNHoNNfTMQ71aaSdR9y5w",
	"fb2+Xq/S9DvcHf4JAAD//wAPWgaBCwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
