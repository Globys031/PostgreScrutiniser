// Package file provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package file

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xY3W7bOBN9FX5sgVx8Siwrf6iBvcgiaZFFuyiaAItF4jVoamSxkUiFHNkxDL37YijJ",
	"P7HiFt1ugCxyZYuiODNnzpwZacGlyQujQaPjgwV3MoVc+L+/CnlXFu9VBnQFDyIv6O/NgmuRAx/wwjic",
	"WHD32YEo0RxIo5NR/+T03fHJaXQU8oCj8hujMDrcDw/3o8PrfjSITgdR+P8wGoQhr4YBL6wpwKICb7U+",
	"e8FjcNKqApXRfOBXmUkYpsDG3i+WkGMBx3lBJhxapSe8am0+PoBWHYq8YImxbJaCfnwWmwnHpAWBEPOA",
	"J8bmAvmAxwJh3x+6ZawKuIX7UlmI+eCmdr1xYLjcbMZfQSJ5dmGtsZ/AOTHxHm4GDnR3lK9u7za2ub3L",
	"HGXuXCXJR6U7zGXN6iZMtMowFciUY8QMYSFmY8AZEGIz46Fynbj7hccHugKkShQ4whxTsMybSIVjYzpS",
	"xDHEAbOQmynEzFhWapkKPfFJAF3mFOzFfSkyHvBL7cAiD/g5ZIDrYT+Bko+y2bQLoy/gCqNdB06xSpLH",
	"/K+x42/YuWHaIINYIcNUuZpIudClyLL5/271G3aJbKayjI2BmSnYmVWIoNl47vl39vH64gu7+vPq+uIT",
	"4Z0LHR/c6hW+deRVsDSai4eRNFqDJIQd+4Xt9cNw71ZTCU6FLMt8NDP2bpRDTjejk6h/dLx3q9NyAqNC",
	"TMA/Y5Jkb91OgyzVo0LIfehvLSQUZm8lEb1GH3ob5FpmnwtrxZyuCYjuUqaw18vZQzYGpSdLwlHmW7h5",
	"r3S2lxkpsl4rONKWqLRyYHt1AbveTi06Df9FoVh5uiVzx63M/ZCcLCFsXA1qLm7TuAq4A1lahfMrSk9N",
	"3DEIC/asxHR19b714rc/rnlQiz2dVN9deZQiFryig5VOjBcjhT5GyjujxIMFLYGdfb7kAZ+CdTV8/YPw",
	"ICR0TQFaFIoP+KFfCnghMPWeNUmrsfd1vJWFWg8cE1nGulK7ng9SI6pYQc9exnzQqEPdv+iubarbW4/C",
	"ow6ZKqUE51i7kyI4Cvu0URqNoJH+iqLIlPR2el8dPdg2zG+Vy4b0e2A37V+bO9AsV85RHRjLcpERZSAm",
	"T47D8Nk8uQI7BcucioH5HsP9lkSUGT6bE6WGhwIkQtz6QPUqJo7qomHPsAr4BHA7lxPAH+TNB8AnSRP9",
	"tODX5qqO0F+Z+AKZWAWtqPUW9e+IlLvaJXH1OhOsGZHkNwm7U+e8wFqRA4J1fkrZNPd79wTN0LDGw/VW",
	"tqudnvYjTo2BtglMedC+D6xFztdbGdoSgrV8FAIRLD3/V6edm3D/3XDRD6u3HT1y+Crn/1k5L0rsGgUc",
	"Ggtug7Xta0VMg/SS91sF8rnE76sOf2jHSyYaGtwbF+IXWyLH27AuJ9mmVpIyy+arSH3BPB9NL/VUZCpe",
	"pZI1A/Nr4b6M7kd02qf3k+0G+OSQFq9eI9ovDLK0FjR2t0JPWaFjJnZ2xQ+A7dvpP2mKKkmYmAilHb7Y",
	"uv95dN36UPLdo+uriLyKyNMistQN0pG1Dxm+WNc/YdwMq2H1dwAAAP//VoLEB64WAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
