// Package file provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package file

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xYW2/bOBP9K/zYAnn4lFhWbqiBfcgiaZFFuyiaAItF4jVoamSxkUiFHNkxDP33xVCS",
	"L7HiFt1ugCzyZIui5nI458xICy5NXhgNGh0fLLiTKeTC//1VyLuyeK8yoCt4EHlBf28WXIsc+IAXxuHE",
	"grvPDkSJ5kAanYz6J6fvjk9Oo6OQBxyV3xiF0eF+eLgfHV73o0F0OojC/4fRIAx5NQx4YU0BFhV4r7Xt",
	"BY/BSasKVEbzgV9lJmGYAhv7uFhCgQUc5wW5cGiVnvCq9fnYAK06FHnBEmPZLAX92BabCcekBYEQ84An",
	"xuYC+YDHAmHfG91yVi1XzPgrSCT3F9Ya+wmcExMfxmZ2QHdH+er2tkUL96WyEPPBzaPtww53dDznKkk+",
	"Kt3hLmtWN7GgVYapQKYco+MXFmI2BpwBwTIzHg/XCa5feGzQFSBVosARsJiCZd5FKhwbk0kRxxAHzEJu",
	"phAzY1mpZSr0xCMNuswp2Yv7UmQ84JfagUUe8HPIANfT3oV7C8QXcIXRrgOMWCXJ40quAeJv2Llh2iCD",
	"WCHDVLm6JHKhS5Fl8//d6jfsEtlMZRkbAzNTsDOrEEGz8dxX0tnH64sv7OrPq+uLTwRqLnR8cKtXINbp",
	"VcHSaS4eRtJoDZJgdOwXttcPw71bTWSaClmW+Whm7N0oh5xuRidR/+h471an5QRGhZiAf8Ykyd66nwY+",
	"YpZCyH3qby0klGZvRfZew/TeRgWtkBXWijldExDdpKS014npIRuD0pNlVdHxtnDzXulsLzNSZL1WOqQt",
	"UWnlwPZqKrreTlU5Df9Fyq8i3RKs41awflQYqoA7kKVVOL8i4OuSHIOwYM9KTFdX71v7v/1xzYNakMlS",
	"fXflK0UseEWGlU6M1xKFPno6UUZHCha0BHb2+ZIHfArW1cD0D8KDkHAzBWhRKD7gh34p4IXA1EfWHEeN",
	"qqfhFr41nR0TWca6Dm0daRIT4qKgZy9jPmjIXfcYumsb3nrvUXjUoTKllOAca3dSBkdhnzZKoxE00l9R",
	"FJmS3k/vq6MH26b2LSJsKLcHdtP/tbkDzXLlHFW4sSwXGRUDxBTJcRg+WyRXYKdgmVMxMN8iuN+SiDLD",
	"Zwui1PBQgESI2xio6sXEkZY31TOsAj4B3D7LCeAP1s0HwCeLJvppya/NPh2pv1biC6zEKmhFrbeof0fU",
	"vKpdElevM8GaCUd+s2B36pwXWCtyQLDOzx+b7n7vnnIZGtZEuN6kdjXK037EqTHQNoEpD9qZfS1zvj5r",
	"oi0hWDuPQiCCpef/6vRzE+6/Gy76YfW2o/sNX+X8PyvnRYldo4BDY8FtVG37VhDTiLys+y2CfC7x+9jh",
	"jXa8CKKhkbwJIX6xFDnehnU5ozZcScosm68y9YR5vjK91FORqXh1lKwZhV+J+zK6H5XTPr0FbzfAJ4e0",
	"ePUa0X4gkKW1oLG7FfqSFTpmYmdX/ADYvnf+k6aokoSJiVDa4Yvl/c8r161PIN89ur6KyKuIPC0iS90g",
	"HVn7kOHJuv4J42ZYDau/AwAA//8fG33eUhYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
