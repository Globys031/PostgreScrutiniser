// Package file provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package file

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW8bRwz9KwSb49pS0uTQvbVIGhhoi6A9Gq4xmuFKk+7OjDlcu4ah/15wtLIk79oJ",
	"msDwQSdJnA+Sj49vqDu0sUsxUJCM9R1mu6LOlK+/GPtPn371LemvxDERi6eyFkxXrI6yZZ/Ex4B1sUJs",
	"QFYEi3IaGj1eodwmwhqzsA9LXFcofuoCtWYxXYImMtysKDy8C25MBstkhBxW2ETujGCNzgidlEtHztb3",
	"lrj4TFbU/QfmyL9TzmY5kR3p6mW3Wx7fyHTVeyaH9fmD7RcT7hTE975pfvNhwl07WA+xUCvIygj4DFok",
	"w+RgQXJDCstNLHjkSXCL4eGFOZH1jaeswMqKGIqLlcmw0CuNc+QqYOriNTmIDH2wKxOWBWkKfafJfrjq",
	"TYsVnoVMLFjhe2pJ9tN+CvctEH9STjHkCTCcbxr99EJdMbxiarDGH2Y7os4Gls4OcN35M8zmVn8rQtNU",
	"VVrt07Vwa0E+LO+xfnG0VZMPTSyM9KJ9WQAFhYCYgiX4+dMZVnhNnDehvT6dn8418pgomOSxxh+LqcJk",
	"ZFUQnm0C3eRVijnKcEOKDKZtIcUsS6Z81Z6aXuKpjaHZz1UpqRU1evbMYT1QZKMnuspD9Yv3N/O3E1zt",
	"raWcYbtTM3g3n+tGG4NQEP1qUmq9LX5mn7Me3ArYl4hz0P8F2EP/fxFfE0P2jqC0N5YtjelbebYg+kD/",
	"JrJCbhuD7lmSjPFakvzP2nwkebQwb75bqntvyUSix2o/Uu11tW3O2d3m81JFa/1Uq27sYGDQe/tFUjzZ",
	"r0Uo2HQkxBnr84fu/ph+80EiDBGqaGFd5AarYXLAvWxw/zUV7qnaQzQZEWI9//dUGpfn85OfLu5ez9ev",
	"JhT04ig13yQ1qZeppyBLZMoH1d7OFg4Wt3DPlxGxPvXydawql06MkxJhQTCE4F4Utd6Nobp/+QeONX3b",
	"3u6iX1f49hmJdhauTevdrjwwjCFHwu/UVkt2ojPoWHAffXjdbvzajue2Z6Yg09JbaGGCA/OkCn8k2c63",
	"3yLCvmnALI0PWV5Uv3w/wo3+VHzliHFsvpfUfOv1fwEAAP//R3S4aYwQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
