// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUb0/bPhD+Ktb9ftI2qaLlT5HIuw0oSlgotB1sQwiZ5NK6TWzjc2hDle8+2eFfS6W9",
	"QXvn3D3x89z5uVtCogqtJEpLECyBkgkW3B+PjVEmRiI+RvetjdJorECfRZe9LV7TttIIAZA1Qo6hrltg",
	"8L4UBlMIrtfgN61nuLqbYmKhbsF3NRZygPclkvUEC17oHCG4XoLkhQNrRXZskBJTWiEFoYEWaE40VyaF",
	"4PmXl0h901pT3Vz0TuzbWzZVslnssEwSJBogaSUJ10VbNUPpVFXR5O4kEX0RhT8ew+0zEVIoB93kMNwP",
	"Z/rn5WF0wLCKHtOrUPRFuIinceds9Gu3fzSbh2Iu7oqe/T304Ad+sjcenBzkLs6vep1wqhZno+OdeBp3",
	"46Owyi7YMMtPF/NBNIzx9LS3czHay+Y6xijb3T/vz/ar6PKWpxdE826yoUNPqpeQuj4LbYVyRURXI8Z9",
	"ucwjWKYM46WdoLQi4RZTVjbv8dfuuZCQmfJswrpuQU/kyI5ElqFBmSD7eh5CCx7QUEO/vdXZ6rjGK42S",
	"awEB7PqQezk78crbuXsU71TVWGi1BJ9mnJgqDeNa5063UPITMarIYuErYJ/fu+wLeGLj4aFz2rki6z0A",
	"jc2R7DeVVo40UdKi9PxvSNpTUvJ1wNzpf4MZBPBf+3UC20/j114Zhnp1mKwp0Qca2/nadzqdj+Ve97bX",
	"sNpPaiDMvGBa0P1AHSv7ZwP/EM0DGkYiRebXC3hIxsvc/jMRpcSFxsT5/0mDMzwfk1t6bj7gpq7r+k8A",
	"AAD//xzb2yBnBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
