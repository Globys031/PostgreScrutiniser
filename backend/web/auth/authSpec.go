// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xUb0/bPhD+Ktb9ftI2KaLlT5HIuw0oSlgotB1sQwiZ5NK6TWzjc2hD1e8+2eFfS6W9",
	"Qesr9+6Jn+funvMCUlVqJVFagnABlI6x5P54bIwyCRLxEbr/2iiNxgr0WXTZ2/I1bWuNEAJZI+QIlssA",
	"DN5XwmAG4fUa/CZ4hqu7CaYWlgF8VyMh+3hfIVlPMOelLhDC6wVIXjqwVmRHBik1lRVSEBoIQHOimTIZ",
	"hM+fvESWN8Ga6uaid2Lf3rKpks1iB1WaIlEfSStJuC7aqilKp6qOx3cnqeiJOPrxGG2fiYgi2e+kh9F+",
	"NNU/Lw/jA4Z1/JhdRaInonkySdpnw1+7vaPpLBIzcVd27e+BBz/wk71R/+SgcHF+1W1HEzU/Gx7vJJOk",
	"kxxFdX7BBnlxOp/140GCp6fdnYvhXj7TCcb57v55b7pfx5e3PLsgmnXSDR16Ur2AzPVZaCuUKyK+GjLu",
	"y2UewXJlGK/sGKUVKbeYsaqZx1+750JC5sqzCeu6BV1RIDsSeY4GZYrs63kEATygoYZ+e6u91XaNVxol",
	"1wJC2PUhNzk79spbhRuKd6pqLLRagk8zTkxVhnGtC6dbKPmJGNVksfQVsM/vXfYFPLHx8Mg57VyR9R6A",
	"xuZI9pvKakeaKmlRev43JK0JKfm6YO70v8EcQviv9bqBraf1a60sw3J1mayp0Aca2/nad9rtj+Ve97bX",
	"sNpPaiDMvGAC6HygjpX3ZwP/AM0DGkYiQ+afF/CQnFeF/WciKolzjanz/5MG//sTAAD//4TOXZRXBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
