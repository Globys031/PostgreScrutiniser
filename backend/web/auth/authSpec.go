// Package auth provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package auth

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xU3U7bTBB9ldV8n9RWskj4CRK5a4Egm5pAkkJbhNBij5NN7N1lZ01iIr97tWv+Emh7",
	"g3pnzxzPnDMzx0tIVKGVRGkJukugZIIF94+HxigTIxEfo3vXRmk0VqDPosteF89pW2mELpA1Qo6hrgMw",
	"eFsKgyl0L9fgV8EjXN1MMbFQB/BVjYUc4G2JZH2DBS90jtC9XILkhQNrRXZskBJTWiEFoYEANCeaK5NC",
	"9/GTp0h9Fayxbgq9Ivuyyt+U+BIvPvitlmGZJEg0QNJKEq5rsmqG0pGuosnNUSL6Igq/3YebJyKkUA46",
	"yX64G8709/P9aI9hFd2nF6Hoi3ART+P2yejHdv9gNg/FXNwUPftz6MF3/GhnPDjay12cX/Ta4VQtTkaH",
	"W/E07sQHYZWdsWGWHy/mg2gY4/Fxb+tstJPNdYxRtr172p/tVtH5NU/PiOad5I0BPrBeQurWILQVyomI",
	"LkaMe7nMI1imDOOlnaC0IuEWU1Y26/rzcJvyr0fqcEJmylMQ1o0QeiJHdiCyDA3KBNnn0xACuENDDafN",
	"jfZG221DaZRcC+jCtg+55dmJl9PK3ab8davm7FZ1+TTjxFRpGNc6d2KEkh+IUUUWCy+LfXx9mZ/ANzYe",
	"HrrrPFVk/WFAoxnJflFp5ZomSlqUvv+LJq0pKflsSvf0v8EMuvBf69m1rQfLtlYMVK9O1poSfaC5Ra99",
	"q91+397rB+85rM6TGggzT5gAOu/IY+Wf9Ub/IZo7NIxEisz/ksBDMl7m9p+RKCUuNCbOFA8c6gAsH5Nz",
	"gDMNXNV1Xf8KAAD//+2OfXabBQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
