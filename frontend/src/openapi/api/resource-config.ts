/* tslint:disable */
/* eslint-disable */
/**
 * PostgreScrutiniser
 * Resource Configurations API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
import type { RequestArgs } from '../base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from '../base';

/**
 * 
 * @export
 * @interface ErrorMessage
 */
export interface ErrorMessage {
    /**
     * 
     * @type {string}
     * @memberof ErrorMessage
     */
    'error_message': string;
}
/**
 * 
 * @export
 * @interface ResourceConfig
 */
export interface ResourceConfig {
    /**
     * Details informing why a value was suggested
     * @type {string}
     * @memberof ResourceConfig
     */
    'details'?: string;
    /**
     * specifies what type of values setting could have
     * @type {string}
     * @memberof ResourceConfig
     */
    'enum_vals'?: string;
    /**
     * specifies whether check got an error
     * @type {boolean}
     * @memberof ResourceConfig
     */
    'got_error'?: boolean;
    /**
     * Name of the setting
     * @type {string}
     * @memberof ResourceConfig
     */
    'name': string;
    /**
     * Whether a restart is required after changing the value
     * @type {boolean}
     * @memberof ResourceConfig
     */
    'requires_restart'?: boolean;
    /**
     * Value that will be suggested after running check
     * @type {string}
     * @memberof ResourceConfig
     */
    'suggested_value'?: string;
    /**
     * Unit of measurement (s, ms, kB, 8kB, etc.)
     * @type {string}
     * @memberof ResourceConfig
     */
    'unit'?: string;
    /**
     * Value of the setting
     * @type {string}
     * @memberof ResourceConfig
     */
    'value': string;
}
/**
 * 
 * @export
 * @interface ResourceConfigPatchSchema
 */
export interface ResourceConfigPatchSchema {
    /**
     * Name of the setting
     * @type {string}
     * @memberof ResourceConfigPatchSchema
     */
    'name': string;
    /**
     * Value that will be suggested after running check
     * @type {string}
     * @memberof ResourceConfigPatchSchema
     */
    'suggested_value': string;
}

/**
 * ResourceApi - axios parameter creator
 * @export
 */
export const ResourceApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * resets all content inside of postgresql.auto.conf (wipes its content)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceConfigs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns a specific resource check
         * @param {'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem'} config name of resource config to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceConfigById: async (config: 'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem', options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'config' is not null or undefined
            assertParamExists('getResourceConfigById', 'config', config)
            const localVarPath = `/resource/{config}`
                .replace(`{${"config"}}`, encodeURIComponent(String(config)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Returns all resource configuration check results 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceConfigs: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * applies one or more suggestions
         * @param {Array<ResourceConfigPatchSchema>} resourceConfigPatchSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceConfigs: async (resourceConfigPatchSchema: Array<ResourceConfigPatchSchema>, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceConfigPatchSchema' is not null or undefined
            assertParamExists('patchResourceConfigs', 'resourceConfigPatchSchema', resourceConfigPatchSchema)
            const localVarPath = `/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceConfigPatchSchema, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ResourceApi - functional programming interface
 * @export
 */
export const ResourceApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ResourceApiAxiosParamCreator(configuration)
    return {
        /**
         * resets all content inside of postgresql.auto.conf (wipes its content)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteResourceConfigs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteResourceConfigs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns a specific resource check
         * @param {'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem'} config name of resource config to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceConfigById(config: 'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceConfig>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceConfigById(config, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Returns all resource configuration check results 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceConfigs(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceConfig>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceConfigs(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * applies one or more suggestions
         * @param {Array<ResourceConfigPatchSchema>} resourceConfigPatchSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchResourceConfigs(resourceConfigPatchSchema: Array<ResourceConfigPatchSchema>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchResourceConfigs(resourceConfigPatchSchema, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ResourceApi - factory interface
 * @export
 */
export const ResourceApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ResourceApiFp(configuration)
    return {
        /**
         * resets all content inside of postgresql.auto.conf (wipes its content)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteResourceConfigs(options?: any): AxiosPromise<void> {
            return localVarFp.deleteResourceConfigs(options).then((request) => request(axios, basePath));
        },
        /**
         * Returns a specific resource check
         * @param {'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem'} config name of resource config to get
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceConfigById(config: 'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem', options?: any): AxiosPromise<ResourceConfig> {
            return localVarFp.getResourceConfigById(config, options).then((request) => request(axios, basePath));
        },
        /**
         * Returns all resource configuration check results 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceConfigs(options?: any): AxiosPromise<Array<ResourceConfig>> {
            return localVarFp.getResourceConfigs(options).then((request) => request(axios, basePath));
        },
        /**
         * applies one or more suggestions
         * @param {Array<ResourceConfigPatchSchema>} resourceConfigPatchSchema 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceConfigs(resourceConfigPatchSchema: Array<ResourceConfigPatchSchema>, options?: any): AxiosPromise<void> {
            return localVarFp.patchResourceConfigs(resourceConfigPatchSchema, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ResourceApi - object-oriented interface
 * @export
 * @class ResourceApi
 * @extends {BaseAPI}
 */
export class ResourceApi extends BaseAPI {
    /**
     * resets all content inside of postgresql.auto.conf (wipes its content)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public deleteResourceConfigs(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).deleteResourceConfigs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns a specific resource check
     * @param {'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem'} config name of resource config to get
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public getResourceConfigById(config: 'autovacuum_work_mem' | 'dynamic_shared_memory_type' | 'hash_mem_multiplier' | 'huge_page_size' | 'huge_pages' | 'maintenance_work_mem' | 'max_prepared_transactions' | 'max_stack_depth' | 'shared_buffers' | 'shared_memory_type' | 'temp_buffers' | 'work_mem' | 'logical_decoding_work_mem', options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).getResourceConfigById(config, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Returns all resource configuration check results 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public getResourceConfigs(options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).getResourceConfigs(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * applies one or more suggestions
     * @param {Array<ResourceConfigPatchSchema>} resourceConfigPatchSchema 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ResourceApi
     */
    public patchResourceConfigs(resourceConfigPatchSchema: Array<ResourceConfigPatchSchema>, options?: AxiosRequestConfig) {
        return ResourceApiFp(this.configuration).patchResourceConfigs(resourceConfigPatchSchema, options).then((request) => request(this.axios, this.basePath));
    }
}


